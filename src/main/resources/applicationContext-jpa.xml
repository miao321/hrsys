<?xml version="1.0" encoding="UTF-8"?>
<beans 
xmlns="http://www.springframework.org/schema/beans"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:tx="http://www.springframework.org/schema/tx"
xmlns:jpa="http://www.springframework.org/schema/data/jpa"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx.xsd
http://www.springframework.org/schema/data/jpa
http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
	<!-- 1.引入公共配置文件 db.properties-->
	<context:property-placeholder location="classpath:db.properties"/>
	<!--2.配置数据源（c3p0）-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${dataSource.driverClassName}"></property>
		<property name="jdbcUrl" 	 value="${dataSource.url}"></property>
		<property name="user" 		 value="${dataSource.username}"></property>
		<property name="password" 	 value="${dataSource.password}"></property>
		<property name="maxPoolSize" value="40"></property>
		<property name="minPoolSize" value="1"></property>
		<property name="initialPoolSize" value="1"></property>
		<property name="maxIdleTime" value="20"></property> 
	</bean>
	
	<!--3.配置JPA entityManagerFactory-->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="packagesToScan" value="com.hrsys.*.entity" />
		<!--用于指定持久化实方言
		<property name="jpaDialect">    
		    <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
		</property>
		-->
		<!-- ClassLoader 实现 LoadTimeWeaver
		<property name="loadTimeWeaver">
			<bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
		</property>
		-->  
		<!-- 用于指定持久化实现厂商类 -->
		<property name="persistenceProvider">    
			<bean class="org.hibernate.jpa.HibernatePersistenceProvider"/>
		</property>
		<!--
		<property name="jpaVendorAdapter">    
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
		</property>
		-->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect" >${hibernate.dialect}</prop>				
		        <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
		        <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
		        <prop key="hibernate.max_fetch_depth">2</prop>
		        <!--  
			        <prop key="hibernate.current_session_context_class">thread</prop>  
					<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>       
					<prop key="hibernate.query.substitutions">true 1, false 0</prop>
					<prop key="hibernate.default_batch_fetch_size">16</prop>
					<prop key="hibernate.generate_statistics">true</prop>
					<prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
					<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
					<prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
					<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
					<prop key="cache.cache.use_query_cache">true</prop>
					<prop key="cache.cache.use_second_level_cache">true</prop>
				 -->
			</props>
        </property>
	</bean>
	<!--4.配置JPA事务管理-->
	<bean id="transactionManager"  class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>
	<!--5.注解事务 ：transaction-manager="transactionManager" proxy-target-class="true" -->
	<tx:annotation-driven />	
	
	<!--6.指定JPA实现的持久层的根目录 
		entity-manager-factory-ref:默认获取id=entityManagerFactory Bean
		transaction-manager-ref:默认获取id=transactionManager Bean
	-->
	<jpa:repositories base-package="com.hrsys.*.dao" />
	
	<!-- 自定义Realm -->
      <!-- <bean id="myRealm" class="com.hik.realm.MyRealm"/>  
      
      安全管理器
      <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
          <property name="realm" ref="myRealm"/>  
      </bean>  
      
      Shiro过滤器
     <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
         Shiro的核心安全接口,这个属性是必须的  
         <property name="securityManager" ref="securityManager"/>
         身份认证失败，则跳转到登录页面的配置  
         <property name="loginUrl" value="/index.jsp"/>
         权限认证失败，则跳转到指定页面  
         <property name="unauthorizedUrl" value="/unauthor.jsp"/>  
         Shiro连接约束配置,即过滤链的定义  
         <property name="filterChainDefinitions">  
             <value>  
                  /login=anon
                 /admin*=authc
                 /student=roles[teacher]
                 /teacher=perms["user:create"]
             </value>  
         </property>
     </bean>  
     
     保证实现了Shiro内部lifecycle函数的bean执行  
     <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
     
     开启Shiro注解
     <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
           <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
         <property name="securityManager" ref="securityManager"/>  
     </bean>     
     配置事务通知属性  
     <tx:advice id="txAdvice" transaction-manager="transactionManager">  
         定义事务传播属性  
         <tx:attributes>  
             <tx:method name="insert*" propagation="REQUIRED" />  
             <tx:method name="update*" propagation="REQUIRED" />  
             <tx:method name="edit*" propagation="REQUIRED" />  
             <tx:method name="save*" propagation="REQUIRED" />  
             <tx:method name="add*" propagation="REQUIRED" />  
             <tx:method name="new*" propagation="REQUIRED" />  
             <tx:method name="set*" propagation="REQUIRED" />  
             <tx:method name="remove*" propagation="REQUIRED" />  
             <tx:method name="delete*" propagation="REQUIRED" />  
             <tx:method name="change*" propagation="REQUIRED" />  
             <tx:method name="check*" propagation="REQUIRED" />  
             <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
             <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
             <tx:method name="load*" propagation="REQUIRED" read-only="true" />  
             <tx:method name="*" propagation="REQUIRED" read-only="true" />  
         </tx:attributes>  
     </tx:advice>  
   
     配置事务切面  
     <aop:config>  
         <aop:pointcut id="serviceOperation"  
             expression="execution(* com.hik.service.*.*(..))" />  
         <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />  
     </aop:config>  --> 
</beans>